package miniomp

#if EXTRAE_ON
/* 
#cgo CFLAGS: -g -Wall -Iextrae_build/include
#cgo LDFLAGS: -Lextrae_build/lib -lpttrace
#include <extrae.h>
*/
import "C"
#endif

import "runtime"

type Thread struct {
	tid int
	tasks chan Task
}

type ThreadPool struct {
	numThreads int
	pool []Thread
}

func (t *Thread) GetTid() int {
	return t.tid
}

func (t *Thread) SetTid(tid int) {
	t.tid = tid
}

func (t *Thread) SetTasks(tasks chan Task){
	t.tasks = tasks
}

func CreatePool(nt int) *ThreadPool {
	ret := &ThreadPool{
		numThreads: nt,
		pool: make([]Thread, nt),
	}

	for i, t := range ret.pool {
		(&t).SetTid(i)
	}

	return ret
}

func (t *Thread) Work() {

	if miniomp_bind {
		runtime.LockOSThread()
	}

	for true {
		task := <-t.tasks
#if EXTRAE_ON
		C.Extrae_event(8000001, 1)
#endif
		task.f(task.params)
		miniomp_wg.Add(-1)
#if EXTRAE_ON
		C.Extrae_event(8000001, 0)
#endif
	}
}
